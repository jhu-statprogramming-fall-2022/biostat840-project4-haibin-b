---
title: "Untitled"
author: "Haibin Bai"
date: "2022-12-23"
output: html_document
---

```{r, include=FALSE}
library(flexdashboard)
library(DT)
library(shiny)
library(dplyr)
library(ggplot2)
library(kmed)
library(ggrepel)
library(here)
library(bslib)
library(remotes)
library(ggpubr)
library(kmed)
library(purrr)
library(tidyverse)
```

```{r, echo=FALSE}
if(!file.exists(here("data","salary_potential.RDS"))){
  salary_potential <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-03-10/salary_potential.csv')
  system("mkdir -p ./data")
  
  saveRDS(salary_potential, file = here("data","salary_potential.RDS"))
}
salary_potential = readRDS(here("data","salary_potential.RDS"))
# head(salary_potential)
```

About 
===================================== 

Column {data-width=650}
-----------------------------------------------------------------------

**Purpose of this dashboard**

The main purpose of this dashboard is to get an idea about the predicted salary for alumni from specific schools after they graduate during the early part of their career as well as during their mid career. This dashboard can be useful for students who are trying to figure out which school to choose for their graduate studies. The dashboard has some interesting plots which will help in getting an idea about how alumni from a particular school is performing.

**The data**

The data we have used here is the `salary_potential.csv` data set from [TidyTuesday](https://www.tidytuesday.com/). The data provides information about Estimated early career pay (in USD) and Estimated mid career pay (in USD) for alumni from different schools in various states of the US along with some other information as well.

The variables in the data set `salary_potential.csv` that we are interested in are:

* *early_career_pay:* Predicted Salary in early part of the career
* *mid_career_pay:* Predicted Salary in middle part of the career
* *make_world_better_percent:* Proportion of alumni who think they are making World a better place through their services	

Using these three variables, we want to see how the pay varies from one state to another for both early career and mid career. We also want to explore how the amount of pay is related to the variable `make_world_better_place`, which essentially tells us what proportion of alumni from a particular school feels they are doing good to the society in return of the salary they ar getting by receiving education from their respective schools.

**Analysis Methods**

Here, we will carry out a state-wise analysis, where each state will be a representative of all the schools located in that state. We plan to apply a clustering algorithm in order to cluster the states in order of how alumni of the schools of those states are getting payed. We will use a distance based k-medoids algorithm in order to carry out the clustering. Details of the method is given in the *Data and Methods* section of the dashboard.

Column {data-width = 650}
-------------------------------------

<iframe
    width="640"
    height="480"
    src="https://www.youtube.com/embed/4wK-PFDKS6U"
    frameborder="0"
    allow="autoplay; encrypted-media"
    allowfullscreen
>
</iframe>

Data and Methods 
===================================== 

Column {data-height=10 data-width=200 .tabset .tab-fade}
-------------------------------------

### About the Data

The data we have used here is the `salary_potential.csv` data set from [TidyTuesday](https://www.tidytuesday.com/). The data provides information about Estimated early career pay (in USD) and Estimated mid career pay (in USD) for alumni from different schools in various states of the US along with some other information as well. We can get a brief description of the data set along with the link to download the data set [here](https://github.com/rfordatascience/tidytuesday/tree/master/data/2020/2020-03-10#salary_potentialcsv).


```{r, echo=FALSE}
DT::renderDataTable({
  DT::datatable(salary_potential,
                caption = htmltools::tags$caption(
                  style = 'caption-side: top; text-align: Left;'),
                options = list(autoWidth = TRUE,
                               pageLength = 10,
                               scroller = TRUE,
                               scrollY = '450px'))
})
```
### About the Method

Here we have used k-medoids clustering on the data in order to draw interesting inferences. We have used the `kmed` package which uses the distance based k-medoids algorithm in order to carry out clutsering on a set of data points for predefined number of clusters. The package has functions for computing various kind of distances and create a distance matrix followed by k-medoids clustering based on the distance matrix created. It also consists of functions in order to evaluate the validate the qualilty of clustering. 

Here, we will compute the Manhatten Weighted by Range distance (`mrw`) for a data set followed by using the `fastkmed() `function in order to carry out the k-medoid clustering for a pre-defined number of clusters. `fastkmed()` is a simple and fast k-medoid algorithm which was proposed by [Park and Jun (2009)](https://www.sciencedirect.com/science/article/abs/pii/S095741740800081X). The only input required for this function is the distance matrix along with the number of clusters we want to partition our data set into.

Data Analysis 
===================================== 

Column {data-height=10 data-width=200 .tabset .tab-fade}
-------------------------------------

### State-Wise Income Distribution

```{r, out.width="50%"}
selectInput(inputId = "state_selected", 
              label = "Select a state to see the distribution of salary (both early and mid career):",
            choices = salary_potential %>% 
              pull(state_name) %>% 
              unique() %>%
              sort(), selected = "Alabama")
sliderInput(inputId = "nbin",
            label = "Number of Bins for the histogram",
            min = 5,
            max = 30,
            value = 20)
renderPlot({
  
  state_data = salary_potential %>% filter(state_name == input$state_selected)
  
  early = ggplot(state_data, aes(x = early_career_pay)) +
    geom_histogram(color="black",aes(y=..density..), fill="white",bins = input$nbin) +
    geom_density(alpha=.1, fill="blue") + 
  labs(title = paste0("Histogram of the early pay for ", input$state_selected),
       x = "Early Career Pay")
  
  mid = ggplot(state_data, aes(x = mid_career_pay)) +
    geom_histogram(color="black",aes(y=..density..), fill="white",bins = input$nbin) +
    geom_density(alpha=.1, fill="blue") +
  labs(title = paste0("Histogram of the early pay for ", input$state_selected),
       x = "Mid Career Pay")
  
  ggarrange(early, mid,
          labels = c("A", "B" ),
          ncol = 3, nrow = 2)
})
```


### Clustering Results

```{r, fig.width = 15, fig.height = 12}
sliderInput(inputId = "nclus",
            label = "Number of Clusters for K-medoids clustering",
            min = 2,
            max = 5,
            value = 3)
renderPlot({
state_wise = salary_potential %>%
  group_by(state_name) %>%
  summarise(early_pay = mean(early_career_pay),
            mid_pay = mean(mid_career_pay),
            better_world = mean(make_world_better_percent,
                                na.rm = TRUE))
num = as.matrix(state_wise[,-c(1)])
rownames(num) = state_wise$state_name
sedist = distNumeric(num, num, method = "mrw")
sfkm = fastkmed(sedist, ncluster = input$nclus, iterate = 50)
num = data.frame(num) %>%
  mutate(clusters = as.factor(sfkm$cluster),
         names = state_wise$state_name)
set.seed(1)
s = sample(1:length(num$names),40,replace = FALSE)
nn = num$names
nn[s] = ""
p1 = ggplot(data = num,
       aes(x = early_pay,y = mid_pay,
           color = clusters,
           label = names)) +
  geom_point() +
  geom_text(size = 3, aes(
    label=nn),
    hjust=1,
    vjust=-1) +
  xlim(35000,70000) +
  theme(text = element_text(size = 10)) +
  labs(title = "Results from K-medoid Clustering",
       subtitle = "betterment of World percentage also taken in account for clustering",
       x = "Early Pay",
       y = "Middle Pay",
       caption = "Anik Burman (PhD 1st year, Biostatistics, Bloomberg School of Public Health)")
new = num[,-5]
new$clusters = as.numeric(new$clusters)
str_dat = new |> split(new$clusters)
mean = str_dat |> map_dfr(.f = ~colMeans(.x))
sd = str_dat |> map_dfc(.f = function(.x) apply(.x, 2, sd))
sd = as_tibble(t(sd)) %>%  select(-V4) %>%  mutate(clusters = 1:input$nclus)
sd = rename(sd,
            sd_early_pay = V1,
            sd_mid_pay = V2,
            sd_better_world = V3)
plot_data = left_join(mean,sd,by = c("clusters" = "clusters"))
plot_data = plot_data %>%
  select(-c(better_world,sd_better_world)) %>%
  relocate(clusters, .before = early_pay)
long <- plot_data %>%
  pivot_longer(
    cols = `early_pay`:`sd_mid_pay`,
    names_to = "names",
    values_to = "values"
  )
c = seq(2, 4 * input$nclus, by = 4)
c = sort(c(c,c-1))
plot_data = cbind(long[c,c(1,3)],long[-c,c(3)])
colnames(plot_data)[2:3] = c("mean","sd")
plot_data = as_tibble(plot_data) %>%
            mutate(type = rep(c("early","mid"),input$nclus))
p2= ggplot(plot_data, aes(x = as.factor(clusters), y = mean, colour = type, group = type)) +
geom_errorbar(aes(ymin = mean-sd, ymax = mean + sd)) +
geom_point(color = "black", size = 1.5) +
labs(title = "Interval Estimate of Pays for the Each Clusters",
       subtitle = "A clear pattern in early and mid pay is visible",
       y = "Pay",
       x = "Clusters",
     caption = "Anik Burman (PhD 1st year, Biostatistics, Bloomberg School of Public Health)")
p3 = ggplot(num, aes(x=better_world)) +
  geom_histogram(bins = 7,aes(y=..density..), colour="black", fill="white")+
  facet_grid(clusters~.)+
  geom_density(alpha=.2, fill="blue") +
  labs(title = "Histogram of 'Making World Better' Percentage for each Cluster",
       subtitle = "With increasing potential income feeling decreases",
       y = "density",
       x = "% of alumni who think they are making the world a better place",
       caption = "Anik Burman (PhD 1st year, Biostatistics, Bloomberg School of Public Health)")
ggarrange(p1,p2, p3,
          labels = c("A","B", "C"),
          ncol = 3, nrow = 2)  
})
```